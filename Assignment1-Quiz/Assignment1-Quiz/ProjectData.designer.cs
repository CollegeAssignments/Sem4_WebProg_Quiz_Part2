#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Assignment1_Quiz
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Quiz_ProjectData")]
	public partial class ProjectDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertQuizQuestion(QuizQuestion instance);
    partial void UpdateQuizQuestion(QuizQuestion instance);
    partial void DeleteQuizQuestion(QuizQuestion instance);
    partial void InsertQuizAnswer(QuizAnswer instance);
    partial void UpdateQuizAnswer(QuizAnswer instance);
    partial void DeleteQuizAnswer(QuizAnswer instance);
    partial void InsertQuize(Quize instance);
    partial void UpdateQuize(Quize instance);
    partial void DeleteQuize(Quize instance);
    #endregion
		
		public ProjectDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ProjectDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProjectDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProjectDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ProjectDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<QuizQuestion> QuizQuestions
		{
			get
			{
				return this.GetTable<QuizQuestion>();
			}
		}
		
		public System.Data.Linq.Table<QuizAnswer> QuizAnswers
		{
			get
			{
				return this.GetTable<QuizAnswer>();
			}
		}
		
		public System.Data.Linq.Table<Quize> Quizes
		{
			get
			{
				return this.GetTable<Quize>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuizQuestions")]
	public partial class QuizQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuizId;
		
		private string _Question;
		
		private EntityRef<QuizAnswer> _QuizAnswer;
		
		private EntityRef<Quize> _Quize;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuizIdChanging(int value);
    partial void OnQuizIdChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    #endregion
		
		public QuizQuestion()
		{
			this._QuizAnswer = default(EntityRef<QuizAnswer>);
			this._Quize = default(EntityRef<Quize>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuizId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuizId
		{
			get
			{
				return this._QuizId;
			}
			set
			{
				if ((this._QuizId != value))
				{
					if (this._Quize.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuizIdChanging(value);
					this.SendPropertyChanging();
					this._QuizId = value;
					this.SendPropertyChanged("QuizId");
					this.OnQuizIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="VarChar(MAX)")]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuizQuestion_QuizAnswer", Storage="_QuizAnswer", ThisKey="QuizId", OtherKey="QuizId", IsUnique=true, IsForeignKey=false)]
		public QuizAnswer QuizAnswer
		{
			get
			{
				return this._QuizAnswer.Entity;
			}
			set
			{
				QuizAnswer previousValue = this._QuizAnswer.Entity;
				if (((previousValue != value) 
							|| (this._QuizAnswer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuizAnswer.Entity = null;
						previousValue.QuizQuestion = null;
					}
					this._QuizAnswer.Entity = value;
					if ((value != null))
					{
						value.QuizQuestion = this;
					}
					this.SendPropertyChanged("QuizAnswer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quize_QuizQuestion", Storage="_Quize", ThisKey="QuizId", OtherKey="Id", IsForeignKey=true)]
		public Quize Quize
		{
			get
			{
				return this._Quize.Entity;
			}
			set
			{
				Quize previousValue = this._Quize.Entity;
				if (((previousValue != value) 
							|| (this._Quize.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quize.Entity = null;
						previousValue.QuizQuestion = null;
					}
					this._Quize.Entity = value;
					if ((value != null))
					{
						value.QuizQuestion = this;
						this._QuizId = value.Id;
					}
					else
					{
						this._QuizId = default(int);
					}
					this.SendPropertyChanged("Quize");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuizAnswers")]
	public partial class QuizAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuizId;
		
		private string _Answer;
		
		private System.Nullable<int> _Value;
		
		private EntityRef<QuizQuestion> _QuizQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuizIdChanging(int value);
    partial void OnQuizIdChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnValueChanging(System.Nullable<int> value);
    partial void OnValueChanged();
    #endregion
		
		public QuizAnswer()
		{
			this._QuizQuestion = default(EntityRef<QuizQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuizId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuizId
		{
			get
			{
				return this._QuizId;
			}
			set
			{
				if ((this._QuizId != value))
				{
					if (this._QuizQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuizIdChanging(value);
					this.SendPropertyChanging();
					this._QuizId = value;
					this.SendPropertyChanged("QuizId");
					this.OnQuizIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="VarChar(MAX)")]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int")]
		public System.Nullable<int> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuizQuestion_QuizAnswer", Storage="_QuizQuestion", ThisKey="QuizId", OtherKey="QuizId", IsForeignKey=true)]
		public QuizQuestion QuizQuestion
		{
			get
			{
				return this._QuizQuestion.Entity;
			}
			set
			{
				QuizQuestion previousValue = this._QuizQuestion.Entity;
				if (((previousValue != value) 
							|| (this._QuizQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuizQuestion.Entity = null;
						previousValue.QuizAnswer = null;
					}
					this._QuizQuestion.Entity = value;
					if ((value != null))
					{
						value.QuizAnswer = this;
						this._QuizId = value.QuizId;
					}
					else
					{
						this._QuizId = default(int);
					}
					this.SendPropertyChanged("QuizQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Quizes")]
	public partial class Quize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Category;
		
		private System.Nullable<int> _TotalTimesTaken;
		
		private System.Nullable<int> _TotalScore;
		
		private EntityRef<QuizQuestion> _QuizQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnTotalTimesTakenChanging(System.Nullable<int> value);
    partial void OnTotalTimesTakenChanged();
    partial void OnTotalScoreChanging(System.Nullable<int> value);
    partial void OnTotalScoreChanged();
    #endregion
		
		public Quize()
		{
			this._QuizQuestion = default(EntityRef<QuizQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NChar(30)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTimesTaken", DbType="Int")]
		public System.Nullable<int> TotalTimesTaken
		{
			get
			{
				return this._TotalTimesTaken;
			}
			set
			{
				if ((this._TotalTimesTaken != value))
				{
					this.OnTotalTimesTakenChanging(value);
					this.SendPropertyChanging();
					this._TotalTimesTaken = value;
					this.SendPropertyChanged("TotalTimesTaken");
					this.OnTotalTimesTakenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalScore", DbType="Int")]
		public System.Nullable<int> TotalScore
		{
			get
			{
				return this._TotalScore;
			}
			set
			{
				if ((this._TotalScore != value))
				{
					this.OnTotalScoreChanging(value);
					this.SendPropertyChanging();
					this._TotalScore = value;
					this.SendPropertyChanged("TotalScore");
					this.OnTotalScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quize_QuizQuestion", Storage="_QuizQuestion", ThisKey="Id", OtherKey="QuizId", IsUnique=true, IsForeignKey=false)]
		public QuizQuestion QuizQuestion
		{
			get
			{
				return this._QuizQuestion.Entity;
			}
			set
			{
				QuizQuestion previousValue = this._QuizQuestion.Entity;
				if (((previousValue != value) 
							|| (this._QuizQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuizQuestion.Entity = null;
						previousValue.Quize = null;
					}
					this._QuizQuestion.Entity = value;
					if ((value != null))
					{
						value.Quize = this;
					}
					this.SendPropertyChanged("QuizQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
